#!/bin/bash
# Copyright (C) 2012-2013 The SaberMod Project
# Build Script.  Use bash to run this script, bash sm-grouper from source directory
export USING_BUILD_SCRIPTS=true;
export MANUFACTURER=asus;
export DEVICE=grouper;
export BUILD=SaberMod;
export KERNEL=grouper;

# Ensure our colors are used above preset colors
unset GCC_COLORS;
# Always use diagnostic colors, supported in gcc 4.9.x+
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01';

# Source Directory PATH
export DIRSRC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

echo "you are building for device $DEVICE" && echo "" && echo "Device uses $KERNEL kernel" && echo "" && echo "Starting configurable build options, you will be given the option to make a clean build prior to building" && echo "";

echo "Number of jobs you want to enable for building (number of cpu's is recommended unless you want to add more ;) 1=auto, 2=4, 3=8, 4=16, 5=continue";
echo "";
PS4='Please enter your choice: '
options=("1" "2" "3" "4" "5")
select opt in "${options[@]}"
do
    case $opt in
        "1")
            echo "you chose choice 1";
            echo "";
            export J=-j`cat /proc/cpuinfo | grep "^processor" | wc -l` "$@";
            ;;
        "2")
            echo "you chose choice 2";
            echo "";
            export J=-j4;
            ;;
        "3")
            echo "you chose choice 3";
            echo "";
            export J=-j8;
            ;;
        "4")
            echo "you chose choice 4";
            echo "";
            export J=-j16;
            ;;
        "5")
            echo "you chose choice 5";
            break;
            ;;
        *)
            echo "invalid option";
            exit 1;
            ;;
    esac
done

# call with a prompt string or use a default
read -r -p "${1:-repo sync first? [Y/n] Default is yes} " response
case $response in
    [nN][oO]|[nN])
        # Do nothing
        echo "";
        ;;
    *)
        # sync the repo
        repo sync $J;
        echo "repo sync is complete";
        echo "";
        ;;
esac

# Output directory PATH
export OUT_DIR_COMMON_BASE=$DIRSRC/out/$DEVICE;

# call with a prompt string or use a default
read -r -p "${1:-Use -O3 flags? [Y/n] Default is no.  You must do a clean build if first time enabling} " response
case $response in
    [yY][eE][sS]|[yY])
        # -O3 flags.
        export USE_MORE_OPT_FLAGS=yes;
        echo "-O3 flags have been enabled";
        echo "";
        ;;
    *)
        echo "";
        ;;
esac

# call with a prompt string or use a default
read -r -p "${1:-Use strict-aliasing flags? [Y/n] Default is yes.  You must do a clean build if first time disabing} " response
case $response in
    [nN][oO]|[nN])
        # strict-aliasing flags.
        export DEBUG_NO_STRICT_ALIASING=yes;
        echo "strict-aliasing has been disabled";
        echo "";
        ;;
    *)
        echo "";
        ;;
esac

# call with a prompt string or use a default
read -r -p "${1:-Use ccache? [Y/n] Note you must have already set this up manually for it to work.  Pleas see http://source.android.com/source/initializing.html for more info under Setting up ccache section} " response
case $response in
    [yY][eE][sS]|[yY])
        # ccache. Set up ccache to your liking prior to running this script
        export CCACHE_DIR=$DIRSRC/prebuilts/misc/linux-x86/ccache;
        export USE_CCACHE=1;
        echo "ccache building is enabled";
        echo "";
        ;;
    *)
        echo "Skipping ccache";
        echo "";
        ;;
esac

# call with a prompt string or use a default
read -r -p "${1:-Make a clean build? [Y/n] Y for clean, n for dirty. Default is dirty.  If changing flags or wanting to build with a updated toolchain from repo sync recommended is yes} " response
case $response in
    [yY][eE][sS]|[yY])
        # Check for required scripts
        if [ -e $DIRSRC/$KERNEL-kernel-clean ];
        then

            # Start the build
            echo "" && echo "Building kernel before ROM" && bash $DIRSRC/$KERNEL-kernel-clean && . build/envsetup.sh && lunch sm_$DEVICE-user && echo "" && echo "Cleaning target device" && make $J clean && echo "Starting the ROM build" && echo "" && time make $J otapackage;
            cd $DIRSRC/device/$MANUFACTURER/$DEVICE && git reset --hard && cd $DIRSRC;
            echo "Finished!" && echo "";
        else
            echo "No kernel script found, did you delete it?  repo sync and try again, or copy build scripts to the root of your source from build/tools/build-scripts";
            exit 1;
        fi;
        ;;
    *)
        echo "";
        # Check for required scripts
        if [ -e $DIRSRC/$KERNEL-kernel ];
        then

            # call with a prompt string or use a default
            read -r -p "${1:-No clean build.  Do you want to at a bare minimum clean out zips, images, apps and old build.prop? [Y/n]  Default is yes} " response
            case $response in
                [nN][oO]|[nN])
                    echo "Skipping all cleaning steps" && echo "";
                   # Start the build
                    echo "" && echo "Building kernel before ROM" && bash $DIRSRC/$KERNEL-kernel && . build/envsetup.sh && lunch sm_$DEVICE-user && echo "" && echo "Starting the ROM build" && echo "" && time make $J otapackage;
                    cd $DIRSRC/device/$MANUFACTURER/$DEVICE && git reset --hard && cd $DIRSRC;
                    echo "Finished!" && echo "";
                    ;;
                *)

                    echo "";
                    # call with a prompt string or use a default
                    read -r -p "${1:-Do you want to build a clean kernel? [Y/n] Default is no} " response
                    case $response in
                        [yY][eE][sS]|[yY])
                            rm -rf $DIRSRC/out/$DEVICE/$BUILD/target/product/$DEVICE/*.zip $DIRSRC/out/$DEVICE/$BUILD/target/product/$DEVICE/*.img $DIRSRC/out/$DEVICE/$BUILD/target/product/$DEVICE/system/app/*.apk $DIRSRC/out/$DEVICE/$BUILD/target/product/$DEVICE/system/build.prop;
                            if [ -e $DIRSRC/$KERNEL-kernel-clean ];
                            then
                                bash $DIRSRC/$KERNEL-kernel-clean && echo "Clean Kernel build and cleaning steps completed" && echo "";
                                # Start the build
                                . build/envsetup.sh && lunch sm_$DEVICE-user && echo "" && echo "Starting the ROM build" && echo "" && time make $J otapackage;
                                cd $DIRSRC/device/$MANUFACTURER/$DEVICE && git reset --hard && cd $DIRSRC;
                                echo "Finished!" && echo "";
                            else
                                echo "No kernel script found, did you delete it?  repo sync and try again, or copy build scripts to the root of your source from build/tools/build-scripts";
                                exit 1;
                            fi;
                            ;;
                        *)
                            rm -rf $DIRSRC/out/$DEVICE/$BUILD/target/product/$DEVICE/*.zip $DIRSRC/out/$DEVICE/$BUILD/target/product/$DEVICE/*.img $DIRSRC/out/$DEVICE/$BUILD/target/product/$DEVICE/system/app/*.apk $DIRSRC/out/$DEVICE/$BUILD/target/product/$DEVICE/system/build.prop;
                            echo "Cleaning steps completed" && echo "";
                            # Start the build
                            echo "" && echo "Building kernel before ROM" && bash $DIRSRC/$KERNEL-kernel && . build/envsetup.sh && lunch sm_$DEVICE-user && echo "" && echo "Starting the ROM build" && echo "" && time make $J otapackage;
                            cd $DIRSRC/device/$MANUFACTURER/$DEVICE && git reset --hard && cd $DIRSRC;
                            echo "Finished!" && echo "";
                            ;;
                    esac
                    ;;
            esac
        else
            echo "No kernel script found, did you delete it?  repo sync and try again, or copy build scripts to the root of your source from build/tools/build-scripts";
            exit 1;
        fi;
        ;;
esac
