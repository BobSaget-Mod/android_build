#!/bin/bash
# Copyright (C) 2012-2013 The SaberMod Project
# Build Script.  Use bash to run this script, bash grouper-kernel from source directory
export MANUFACTURER=lge;
export DEVICE=mako;

# Source Directory PATH
export DIRSRC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

# Kernel Source PATH
export KERNELSRC=$DIRSRC/kernel/$MANUFACTURER/$DEVICE;

# GCC Use SaberMod's GCC 4.8 toolschain for arm eabi
export ARM_EABI_TOOLCHAIN=$DIRSRC/prebuilts/gcc/linux-x86/arm/arm-eabi-4.8;
export PATH=$PATH:$ARM_EABI_TOOLCHAIN/bin:$ARM_EABI_TOOLCHAIN/arm-eabi/bin;

# Cross compile with arm
export ARCH=arm;
export CCOMPILE=$CROSS_COMPILE;
export CROSS_COMPILE=$ARM_EABI_TOOLCHAIN/bin/arm-eabi-;

# Clean the kernel first.  Since updating to Linaro's daily toolchains the toolchains will likely change on a daily basis.  Because of this we should be building a fresh kernel zImage each time.
echo "Cleaning target kernel source";
make -C $KERNELSRC -j `cat /proc/cpuinfo | grep "^processor" | wc -l` "$@" clean;

# Start the build
echo "";
echo "Starting the kernel build";
echo "";
make -C $KERNELSRC -j `cat /proc/cpuinfo | grep "^processor" | wc -l` "$@" sabermod_grouper_defconfig && time make -C $KERNELSRC -j `cat /proc/cpuinfo | grep "^processor" | wc -l` "$@" zImage &&
make -C $KERNELSRC -j `cat /proc/cpuinfo | grep "^processor" | wc -l` "$@" modules;
cp $KERNELSRC/arch/arm/boot/zImage -f $DIRSRC/device/$MANUFACTURER/$DEVICE/kernel && cp $KERNELSRC/drivers/staging/zram/zram.ko -f $DIRSRC/device/asus/grouper/system/lib/modules/zram.ko;
echo "Kernel build finished, Continuing with ROM build";
echo "";

